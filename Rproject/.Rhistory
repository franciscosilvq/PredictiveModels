prediction$C1 <- NULL
#Load dataset com a coluna das predicts
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
h2o.init(ip = "localhost", port = 54321, startH2O = T)
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
write.csv(prediction,"C:/../../MTAD_Francisco_Ferreira/datasets/\\Bank_shiny", row.names = FALSE)
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
ui <- fluidPage(
titlePanel (h2("Sistema de Apoio a decisao")),
sidebarLayout(
sidebarPanel(style = "margin-top: 50px;",#mover side panel para baixo
# br(), #espacamento
h4("Parametros de Analise", align = "center"),
selectInput("Genero", "Genero:", c("0", "1")),
helpText("0 - Homem 1 - Mulher"),
selectInput("Cartao", "Categoria de Cartao:", c("0","1","2","3")),
helpText("0 - Blue 1 - Silver"),
helpText("2 - Gold 3 - Platinum"),
selectInput("Estado_Civil","Estado Civil:", c("Married","Unknown","Divorced","Single")),
submitButton("Aplicar parametros", icon("redo"),)
),
mainPanel(
br(),br(),
h3("Probabilidade de Incumprimento", align = "Center"),
br(),
plotOutput("barplot")
)
)
)
# Define the server logic
server <- function(input, output) {
output$barplot <- renderPlot({
agg <- aggregate(AC  ~  Gender + Card_Category + Marital_Status, data = prediction, FUN = mean)
dados <- agg[agg$Gender == input$Genero & agg$Card_Category == input$Cartao & agg$Marital_Status == input$Estado_Civil,]
if (nrow(dados) == 0) {
shiny::showModal(modalDialog(
title = "Error",
"No data matches the selected inputs. Please try again with different inputs."
))
} else {
barplot(dados$AC,names.arg = "Attrited Customer",
ylim = c(0,1),
xlab = "Probabilidade tendo em conta Genero, Tipo de Cartao e Estado Civil",
ylab = "Probabilidade",
col = "red",
width = 1,)
text(dados$AC, labels = format(dados$AC, digits=2),pos=3, cex =2)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
ui <- fluidPage(
titlePanel (h2("Sistema de Apoio a decisao")),
sidebarLayout(
sidebarPanel(style = "margin-top: 50px;",#mover side panel para baixo
# br(), #espacamento
h4("Parametros de Analise", align = "center"),
selectInput("Genero", "Genero:", c("0", "1")),
helpText("0 - Homem 1 - Mulher"),
selectInput("Cartao", "Categoria de Cartao:", c("0","1","2","3")),
helpText("0 - Blue 1 - Silver"),
helpText("2 - Gold 3 - Platinum"),
selectInput("Estado_Civil","Estado Civil:", c("Married","Unknown","Divorced","Single")),
submitButton("Aplicar parametros", icon("redo"),)
),
mainPanel(
br(),br(),
h3("Probabilidade de Incumprimento", align = "Center"),
br(),
plotOutput("barplot")
)
)
)
# Define the server logic
server <- function(input, output) {
output$barplot <- renderPlot({
agg <- aggregate(AC  ~  Gender + Card_Category + Marital_Status, data = prediction, FUN = mean)
dados <- agg[agg$Gender == input$Genero & agg$Card_Category == input$Cartao & agg$Marital_Status == input$Estado_Civil,]
if (nrow(dados) == 0) {
shiny::showModal(modalDialog(
title = "Error",
"No data matches the selected inputs. Please try again with different inputs."
))
} else {
barplot(dados$AC,names.arg = "Attrited Customer",
ylim = c(0,1),
xlab = "Probabilidade tendo em conta Genero, Tipo de Cartao e Estado Civil",
ylab = "Probabilidade",
col = "red",
width = 1,)
text(dados$AC, labels = format(dados$AC, digits=2),pos=3, cex =2)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(readr)
library(dplyr)
library(ggplot2)
bank <- read.csv("C:../../MTAD_Francisco_Ferreira/datasets/BankChurners.csv")
unique(bank$Income_Category)
#Eliminar as dual últimas colunas
bank$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 = NULL
bank$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 = NULL
bank$CLIENTNUM = NULL
colnames(bank)
nrow(bank)
#Número de linhas EC
df_EC <- bank %>%
filter(bank$Attrition_Flag == "Existing Customer")
nrow(df_EC)
#Número de linhas AC
df_AC <- bank %>%
filter(bank$Attrition_Flag == "Attrited Customer")
nrow(df_AC)
summary(bank)
#variaveis -< as.factor
bank$Attrition_Flag <- as.factor(bank$Attrition_Flag)
bank$Gender <- as.factor(bank$Gender)
bank$Education_Level <- as.factor(bank$Education_Level)
bank$Income_Category <- as.factor(bank$Income_Category)
bank$Card_Category <- as.factor(bank$Card_Category)
#
levels(bank$Attrition_Flag)[levels(bank$Attrition_Flag) == "Attrited Customer"] <- "AC"
levels(bank$Attrition_Flag)[levels(bank$Attrition_Flag) == "Existing Customer"] <- "EC"
levels(bank$Attrition_Flag)
# Valores de $Gender para numerico
# Men = 0, Female = 1
levels(bank$Gender)[levels(bank$Gender) == "M"] <- "0"
levels(bank$Gender)[levels(bank$Gender) == "F"] <- "1"
# Valores de $Income_Category para numerico
levels(bank$Income_Category)[levels(bank$Income_Category) == "Unknown"] <- 0 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "Less than $40K"] <- 1 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "$40K - $60K"] <- 2#
levels(bank$Income_Category)[levels(bank$Income_Category) == "$60K - $80K"] <- 3 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "$80K - $120K"] <- 4 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "Less than $40K"] <- 5
levels(bank$Income_Category)[levels(bank$Income_Category) == "$120K +"] <- 6 #
#Card Category para num por ordem de prestigio
levels(bank$Card_Category)[levels(bank$Card_Category) == "Blue"] <- 0
levels(bank$Card_Category)[levels(bank$Card_Category) == "Silver"] <- 1
levels(bank$Card_Category)[levels(bank$Card_Category) == "Gold"] <- 2
levels(bank$Card_Category)[levels(bank$Card_Category) == "Platinum"] <- 3
#Education Level para num por ordem de escolaridade
#levels(bank$Education_Level)
levels(bank$Education_Level)[levels(bank$Education_Level) == "Unknown"  ] <-0
levels(bank$Education_Level)[levels(bank$Education_Level) == "Uneducated"  ] <-1
levels(bank$Education_Level)[levels(bank$Education_Level) == "High School"  ] <-2
levels(bank$Education_Level)[levels(bank$Education_Level) == "College"  ] <-3
levels(bank$Education_Level)[levels(bank$Education_Level) == "Graduate"  ] <-4
levels(bank$Education_Level)[levels(bank$Education_Level) == "Post-Graduate"  ] <-5
levels(bank$Education_Level)[levels(bank$Education_Level) == "Doctorate"  ] <-6
#ver nulos no dataset
sum(is.na(bank))
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
#upload dataset previamente alterado para h2o
bankag <- read.csv("C:../../MTAD_Francisco_Ferreira/datasets//bankag")
#Mudanças ao dataset para analise grafica
#ver linhas dataset
nrow(bank)
#variaveis para factor
bankag$Attrition_Flag <- as.factor(bankag$Attrition_Flag)
bankag$Attrition_Flag <- as.integer(bankag$Attrition_Flag)
#quando AC e EC -> 1 e 2
levels(bankag$Attrition_Flag)[levels(bankag$Attrition_Flag) == "AC"] <- "1"
levels(bankag$Attrition_Flag)[levels(bankag$Attrition_Flag) == "EC"] <- "2"
#passar a 0 (nao paga) e 1 (paga)
#variáveis para factor
bankag$Marital_Status <- as.factor(bankag$Marital_Status)
bankag$Marital_Status <- as.numeric(bankag$Marital_Status)
#passar todas as variaveis para numeric se forem int
bankag <- bankag %>%
mutate_if(is.integer, as.numeric)
# Matriz de Correlecao
corr <- cor(bankag[,1:ncol(bankag)])
corrplot(corr, type = "upper", method="color", order="hclust", addCoef.col = "black", tl.col="black", tl.srt=45, tl.cex=0.7, number.cex=0.5, number.digits=2)
# 0<-Male 1<-Female
#bankag$Gender <- as.factor(bankag$Gender)
ggplot(bankag, aes(x=bankag$Months_on_book, y=bankag$Credit_Limit, colour=factor(bankag$Gender))) +
geom_point()+
labs(title = "Relação entre os meses de permanência e o crédito obtido bem como a classificação de género",
x="Meses de Permanencia no banco",
y="Limite de Credito",
colour= "Genero",
caption= "0 = Homem
1 = Mulher")
predict <- read.csv("C:../../MTAD_Francisco_Ferreira/datasets/Prediction_drf_50_20_0.4_bc.csv")
# Cliente Status vs Income Category
counts <- table(bankag$Attrition_Flag,bankag$Income_Category)
barplot(counts,names.arg = c("Unknown","Less than $40K","$40K - $60K","$60K - $80K","$80K - $120K","$120K +"),cex.names = 0.7 ,
main="Situação de cliente face ao Rendimento",
xlab="Classe de Rendimento",
ylim = c(0,3000),
col=c("red","blue"),
legend =rownames(counts),
beside=TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(h2o)
#Load dataset com a coluna das predicts
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
h2o.init(ip = "localhost", port = 54321, startH2O = T)
modelo <- h2o.loadModel("C:../../MTAD_Francisco_Ferreira/Modelos/drf_50_20_0,4_bc")
#listar variáveis do modelo
str(modelo)
#Fazer, em R, plot das curvas de aprenizagem
x <- modelo@model$scoring_history$number_of_trees
y1 <- modelo@model$scoring_history$training_logloss
y2 <- modelo@model$scoring_history$validation_logloss
plot(x,y1, type = "l",col="blue",
main = "Training vs Validation",
ylim = c(0.1,3),
xlab = "Trees",
ylab = "LogLoss")
#Fazer, em R, plot das curvas de aprenizagem
x <- modelo@model$scoring_history$number_of_trees
y1 <- modelo@model$scoring_history$training_logloss
y2 <- modelo@model$scoring_history$validation_logloss
plot(x,y1, type = "l",col="blue",
main = "Training vs Validation",
ylim = c(0.1,3),
xlab = "Trees",
ylab = "LogLoss")
lines.default(x,y2,col="orange")
legend(x = "topright",          # Position
legend = c("Training", "Validation"),  # Legend texts
col = c("blue", "orange"),           # Line colors
lwd = 2)
#Confusion Matrix
modelo@model$validation_metrics@metrics$cm$table
library(shiny)
library(readr)
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
ui <- fluidPage(
titlePanel (h2("Sistema de Apoio a decisao")),
sidebarLayout(
sidebarPanel(style = "margin-top: 50px;",#mover side panel para baixo
# br(), #espacamento
h4("Parametros de Analise", align = "center"),
selectInput("Genero", "Genero:", c("0", "1")),
helpText("0 - Homem 1 - Mulher"),
selectInput("Cartao", "Categoria de Cartao:", c("0","1","2","3")),
helpText("0 - Blue 1 - Silver"),
helpText("2 - Gold 3 - Platinum"),
selectInput("Estado_Civil","Estado Civil:", c("Married","Unknown","Divorced","Single")),
submitButton("Aplicar parametros", icon("redo"),)
),
mainPanel(
br(),br(),
h3("Probabilidade de Incumprimento", align = "Center"),
br(),
plotOutput("barplot")
)
)
)
# Define the server logic
server <- function(input, output) {
output$barplot <- renderPlot({
agg <- aggregate(AC  ~  Gender + Card_Category + Marital_Status, data = prediction, FUN = mean)
dados <- agg[agg$Gender == input$Genero & agg$Card_Category == input$Cartao & agg$Marital_Status == input$Estado_Civil,]
if (nrow(dados) == 0) {
shiny::showModal(modalDialog(
title = "Error",
"No data matches the selected inputs. Please try again with different inputs."
))
} else {
barplot(dados$AC,names.arg = "Attrited Customer",
ylim = c(0,1),
xlab = "Probabilidade tendo em conta Genero, Tipo de Cartao e Estado Civil",
ylab = "Probabilidade",
col = "red",
width = 1,)
text(dados$AC, labels = format(dados$AC, digits=2),pos=3, cex =2)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(readr)
library(dplyr)
library(ggplot2)
bank <- read.csv("C:../../MTAD_Francisco_Ferreira/datasets/BankChurners.csv")
unique(bank$Income_Category)
#Eliminar as dual últimas colunas
bank$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 = NULL
bank$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 = NULL
bank$CLIENTNUM = NULL
colnames(bank)
nrow(bank)
#Número de linhas EC
df_EC <- bank %>%
filter(bank$Attrition_Flag == "Existing Customer")
nrow(df_EC)
#Número de linhas AC
df_AC <- bank %>%
filter(bank$Attrition_Flag == "Attrited Customer")
nrow(df_AC)
summary(bank)
#variaveis -< as.factor
bank$Attrition_Flag <- as.factor(bank$Attrition_Flag)
bank$Gender <- as.factor(bank$Gender)
bank$Education_Level <- as.factor(bank$Education_Level)
bank$Income_Category <- as.factor(bank$Income_Category)
bank$Card_Category <- as.factor(bank$Card_Category)
#
levels(bank$Attrition_Flag)[levels(bank$Attrition_Flag) == "Attrited Customer"] <- "AC"
levels(bank$Attrition_Flag)[levels(bank$Attrition_Flag) == "Existing Customer"] <- "EC"
levels(bank$Attrition_Flag)
# Valores de $Gender para numerico
# Men = 0, Female = 1
levels(bank$Gender)[levels(bank$Gender) == "M"] <- "0"
levels(bank$Gender)[levels(bank$Gender) == "F"] <- "1"
# Valores de $Income_Category para numerico
levels(bank$Income_Category)[levels(bank$Income_Category) == "Unknown"] <- 0 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "Less than $40K"] <- 1 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "$40K - $60K"] <- 2#
levels(bank$Income_Category)[levels(bank$Income_Category) == "$60K - $80K"] <- 3 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "$80K - $120K"] <- 4 #
levels(bank$Income_Category)[levels(bank$Income_Category) == "Less than $40K"] <- 5
levels(bank$Income_Category)[levels(bank$Income_Category) == "$120K +"] <- 6 #
#Card Category para num por ordem de prestigio
levels(bank$Card_Category)[levels(bank$Card_Category) == "Blue"] <- 0
levels(bank$Card_Category)[levels(bank$Card_Category) == "Silver"] <- 1
levels(bank$Card_Category)[levels(bank$Card_Category) == "Gold"] <- 2
levels(bank$Card_Category)[levels(bank$Card_Category) == "Platinum"] <- 3
#Education Level para num por ordem de escolaridade
#levels(bank$Education_Level)
levels(bank$Education_Level)[levels(bank$Education_Level) == "Unknown"  ] <-0
levels(bank$Education_Level)[levels(bank$Education_Level) == "Uneducated"  ] <-1
levels(bank$Education_Level)[levels(bank$Education_Level) == "High School"  ] <-2
levels(bank$Education_Level)[levels(bank$Education_Level) == "College"  ] <-3
levels(bank$Education_Level)[levels(bank$Education_Level) == "Graduate"  ] <-4
levels(bank$Education_Level)[levels(bank$Education_Level) == "Post-Graduate"  ] <-5
levels(bank$Education_Level)[levels(bank$Education_Level) == "Doctorate"  ] <-6
#ver nulos no dataset
sum(is.na(bank))
#banka analise grafica
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
#upload dataset previamente alterado para h2o
bankag <- read.csv("C:../../MTAD_Francisco_Ferreira/datasets//bankag")
#Mudanças ao dataset para analise grafica
#ver linhas dataset
nrow(bank)
#variaveis para factor
bankag$Attrition_Flag <- as.factor(bankag$Attrition_Flag)
bankag$Attrition_Flag <- as.integer(bankag$Attrition_Flag)
#quando AC e EC -> 1 e 2
levels(bankag$Attrition_Flag)[levels(bankag$Attrition_Flag) == "AC"] <- "1"
levels(bankag$Attrition_Flag)[levels(bankag$Attrition_Flag) == "EC"] <- "2"
#passar a 0 (nao paga) e 1 (paga)
#variáveis para factor
bankag$Marital_Status <- as.factor(bankag$Marital_Status)
bankag$Marital_Status <- as.numeric(bankag$Marital_Status)
#passar todas as variaveis para numeric se forem int
bankag <- bankag %>%
mutate_if(is.integer, as.numeric)
# Matriz de Correlecao
corr <- cor(bankag[,1:ncol(bankag)])
corrplot(corr, type = "upper", method="color", order="hclust", addCoef.col = "black", tl.col="black", tl.srt=45, tl.cex=0.7, number.cex=0.5, number.digits=2)
# 0<-Male 1<-Female
#bankag$Gender <- as.factor(bankag$Gender)
ggplot(bankag, aes(x=bankag$Months_on_book, y=bankag$Credit_Limit, colour=factor(bankag$Gender))) +
geom_point()+
labs(title = "Relação entre os meses de permanência e o crédito obtido bem como a classificação de género",
x="Meses de Permanencia no banco",
y="Limite de Credito",
colour= "Genero",
caption= "0 = Homem
1 = Mulher")
predict <- read.csv("C:../../MTAD_Francisco_Ferreira/datasets/Prediction_drf_50_20_0.4_bc.csv")
# Cliente Status vs Income Category
counts <- table(bankag$Attrition_Flag,bankag$Income_Category)
barplot(counts,names.arg = c("Unknown","Less than $40K","$40K - $60K","$60K - $80K","$80K - $120K","$120K +"),cex.names = 0.7 ,
main="Situação de cliente face ao Rendimento",
xlab="Classe de Rendimento",
ylim = c(0,3000),
col=c("red","blue"),
legend =rownames(counts),
beside=TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(h2o)
#Load dataset com a coluna das predicts
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
h2o.init(ip = "localhost", port = 54321, startH2O = T)
modelo <- h2o.loadModel("C:../../MTAD_Francisco_Ferreira/Modelos/drf_50_20_0,4_bc")
#listar variáveis do modelo
str(modelo)
#Fazer, em R, plot das curvas de aprenizagem
x <- modelo@model$scoring_history$number_of_trees
y1 <- modelo@model$scoring_history$training_logloss
y2 <- modelo@model$scoring_history$validation_logloss
plot(x,y1, type = "l",col="blue",
main = "Training vs Validation",
ylim = c(0.1,3),
xlab = "Trees",
ylab = "LogLoss")
lines.default(x,y2,col="orange")
legend(x = "topright",          # Position
legend = c("Training", "Validation"),  # Legend texts
col = c("blue", "orange"),           # Line colors
lwd = 2)
#Confusion Matrix
modelo@model$validation_metrics@metrics$cm$table
library(shiny)
library(readr)
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
ui <- fluidPage(
titlePanel (h2("Sistema de Apoio a decisao")),
sidebarLayout(
sidebarPanel(style = "margin-top: 50px;",#mover side panel para baixo
# br(), #espacamento
h4("Parametros de Analise", align = "center"),
selectInput("Genero", "Genero:", c("0", "1")),
helpText("0 - Homem 1 - Mulher"),
selectInput("Cartao", "Categoria de Cartao:", c("0","1","2","3")),
helpText("0 - Blue 1 - Silver"),
helpText("2 - Gold 3 - Platinum"),
selectInput("Estado_Civil","Estado Civil:", c("Married","Unknown","Divorced","Single")),
submitButton("Aplicar parametros", icon("redo"),)
),
mainPanel(
br(),br(),
h3("Probabilidade de Incumprimento", align = "Center"),
br(),
plotOutput("barplot")
)
)
)
# Define the server logic
server <- function(input, output) {
output$barplot <- renderPlot({
agg <- aggregate(AC  ~  Gender + Card_Category + Marital_Status, data = prediction, FUN = mean)
dados <- agg[agg$Gender == input$Genero & agg$Card_Category == input$Cartao & agg$Marital_Status == input$Estado_Civil,]
if (nrow(dados) == 0) {
shiny::showModal(modalDialog(
title = "Error",
"No data matches the selected inputs. Please try again with different inputs."
))
} else {
barplot(dados$AC,names.arg = "Attrited Customer",
ylim = c(0,1),
xlab = "Probabilidade tendo em conta Genero, Tipo de Cartao e Estado Civil",
ylab = "Probabilidade",
col = "red",
width = 1,)
text(dados$AC, labels = format(dados$AC, digits=2),pos=3, cex =2)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
prediction <- read_csv("C:../../MTAD_Francisco_Ferreira/datasets//Prediction_drf_50_20_0.4_bc.csv")
ui <- fluidPage(
titlePanel (h2("Sistema de Apoio a decisao")),
sidebarLayout(
sidebarPanel(style = "margin-top: 50px;",#mover side panel para baixo
# br(), #espacamento
h4("Parametros de Analise", align = "center"),
selectInput("Genero", "Genero:", c("0", "1")),
helpText("0 - Homem 1 - Mulher"),
selectInput("Cartao", "Categoria de Cartao:", c("0","1","2","3")),
helpText("0 - Blue 1 - Silver"),
helpText("2 - Gold 3 - Platinum"),
selectInput("Estado_Civil","Estado Civil:", c("Married","Unknown","Divorced","Single")),
submitButton("Aplicar parametros", icon("redo"),)
),
mainPanel(
br(),br(),
h3("Probabilidade de Incumprimento", align = "Center"),
br(),
plotOutput("barplot")
)
)
)
# Define the server logic
server <- function(input, output) {
output$barplot <- renderPlot({
agg <- aggregate(AC  ~  Gender + Card_Category + Marital_Status, data = prediction, FUN = mean)
dados <- agg[agg$Gender == input$Genero & agg$Card_Category == input$Cartao & agg$Marital_Status == input$Estado_Civil,]
if (nrow(dados) == 0) {
shiny::showModal(modalDialog(
title = "Error",
"No data matches the selected inputs. Please try again with different inputs."
))
} else {
barplot(dados$AC,names.arg = "Attrited Customer",
ylim = c(0,1),
xlab = "Probabilidade tendo em conta Genero, Tipo de Cartao e Estado Civil",
ylab = "Probabilidade",
col = "red",
width = 1,)
text(dados$AC, labels = format(dados$AC, digits=2),pos=3, cex =2)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
